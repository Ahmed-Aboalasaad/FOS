/*	Simple command-line kernel prompt useful for
	controlling the kernel and exploring the system interactively.


KEY WORDS
==========
CONSTANTS:	WHITESPACE, NUM_OF_COMMANDS
VARIABLES:	Command, commands, name, description, function_to_execute, number_of_arguments, arguments, command_string, command_line, command_found
FUNCTIONS:	readline, cprintf, execute_command, run_command_prompt, command_kernel_info, command_help, strcmp, strsplit, start_of_kernel, start_of_uninitialized_data_section, end_of_kernel_code_section, end_of_kernel
=====================================================================================================================================================================================================
 */

#include <inc/stdio.h>
#include <inc/string.h>
#include <inc/memlayout.h>
#include <inc/assert.h>
#include <inc/x86.h>


#include <kern/console.h>
#include <kern/command_prompt.h>
#include <kern/memory_manager.h>
#include <kern/trap.h>
#include <kern/kdebug.h>
#include <kern/user_environment.h>
#include <kern/tests.h>


//TODO:LAB3.Hands-on: declare start address variable of "My int array"

//=============================================================

//Structure for each command
struct Command
{
	char *name;
	char *description;
	// return -1 to force command prompt to exit
	int (*function_to_execute)(int number_of_arguments, char** arguments);
};

//Functions Declaration
int command_writemem(int number_of_arguments, char **arguments);
int command_readmem(int number_of_arguments, char **arguments);
int command_meminfo(int , char **);

//Lab2.Hands.On
//=============
//TODO: LAB2 Hands-on: declare the command function here


//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments);
int command_set_permission(int number_of_arguments, char **arguments);
int command_share_range(int number_of_arguments, char **arguments);

//Lab5.Examples
//=============
int command_nr(int number_of_arguments, char **arguments);
int command_ap(int , char **);
int command_fp(int , char **);

//Lab5.Hands-on
//=============
int command_asp(int, char **);

//Lab6.Examples
//=============
int command_run(int , char **);
int command_kill(int , char **);
int command_ft(int , char **);


//Array of commands. (initialized)
struct Command commands[] =
{
		{ "help", "Display this list of commands", command_help },	//don't need arguments
		{ "kernel_info", "Display information about the kernel", command_kernel_info },	//don't need arguments
		{ "wum", "writes one byte to specific location" ,command_writemem},	//need arguments
		{ "rum", "reads one byte from specific location" ,command_readmem},	//need arguments
		{ "ver", "Print the FOS version" ,command_ver},//don't need arguments
		{ "add", "Add two integers" ,command_add},//need arguments
		{ "cnia", "Create named integer array with the given size", command_cnia},

		//ASSIGNMENT#1 commands
		//=====================
		{ "cav", "Calculate the variance of the given array ", command_cav},
		{ "cvp" ,"Connect a page with a frame",command_cvp},
		{ "cmps", "Count the number of modified pages inside the given virtual range", command_cmps},
		{ "tup" , "Transfer rpage from va1 to va2", command_tup},


		//LAB4: Hands-on
		{ "sm", "Lab4.HandsOn: display the mapping info for the given virtual address", command_show_mapping},
		{ "sp", "Lab4.HandsOn: set the desired permission to a given virtual address page", command_set_permission},
		{ "sr", "Lab4.HandsOn: shares the physical frames of the first virtual range with the 2nd virtual range", command_share_range},

		//LAB5: Examples
		{ "nr", "Lab5.Example: show the number of references of the physical frame" ,command_nr},
		{ "ap", "Lab5.Example: allocate one page [if not exists] in the user space at the given virtual address", command_ap},
		{ "fp", "Lab5.Example: free one page in the user space at the given virtual address", command_fp},

		//LAB5: Hands-on
		{ "asp", "Lab5.HandsOn: allocate 2 shared pages with the given virtual addresses" ,command_asp},

};

//Number of commands = size of the array / size of command structure
#define NUM_OF_COMMANDS (sizeof(commands)/sizeof(commands[0]))

int firstTime = 1;

//invoke the command prompt
void run_command_prompt()
{
	//CAUTION: DON'T CHANGE OR COMMENT THESE LINE======
	if (firstTime)
	{
		firstTime = 0;
		TestAss1();
	}
	else
	{
		cprintf("Test failed.\n");
	}
	//================================================

	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
	}
}

/***** Kernel command prompt command interpreter *****/

//define the white-space symbols
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
	// Split the command string into whitespace-separated arguments
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
	if (number_of_arguments == 0)
		return 0;

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
		{
			command_found = 1;
			break;
		}
	}

	if(command_found)
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
		return return_value;
	}
	else
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
		return 0;
	}
}

/***** Implementations of basic kernel command prompt commands *****/
/***************************************/
/*DON'T change the following functions*/
/***************************************/
//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	return 0;
}

/*DON'T change this function*/
//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
}


/*DON'T change this function*/
int command_readmem(int number_of_arguments, char **arguments)
{
	unsigned int address = strtol(arguments[1], NULL, 16);
	unsigned char *ptr = (unsigned char *)(address ) ;

	cprintf("value at address %x = %c\n", ptr, *ptr);

	return 0;
}

/*DON'T change this function*/
int command_writemem(int number_of_arguments, char **arguments)
{
	unsigned int address = strtol(arguments[1], NULL, 16);
	unsigned char *ptr = (unsigned char *)(address) ;

	*ptr = arguments[2][0];

	return 0;
}

/*DON'T change this function*/
int command_meminfo(int number_of_arguments, char **arguments)
{
	cprintf("Free frames = %d\n", calculate_free_frames());
	return 0;
}

//===========================================================================
//Lab1 Examples
//=============
/*DON'T change this function*/
int command_ver(int number_of_arguments, char **arguments)
{
	cprintf("FOS version 0.1\n") ;
	return 0;
}

/*DON'T change this function*/
int command_add(int number_of_arguments, char **arguments)
{
	int n1 = strtol(arguments[1], NULL, 10);
	int n2 = strtol(arguments[2], NULL, 10);

	int res = n1 + n2 ;
	cprintf("res=%d\n", res);

	return 0;
}

//===========================================================================
//Lab2.Hands.On
//=============
//TODO: LAB2 Hands-on: write the command function here
struct ArrayInfo
{
	char name[100] ;
	int *startAddress;
	int size ;
};

struct ArrayInfo allArrays[30];
int arraysCnt = 0;
int* lastArrAddress = (int*)0xF1000000;

/*DON'T change this function*/
int command_cnia(int number_of_arguments, char **arguments )
{
	//DON'T WRITE YOUR LOGIC HERE, WRITE INSIDE THE CreateIntArray() FUNCTION
	CreateIntArray(number_of_arguments, arguments);
	return 0;
}
/*---------------------------------------------------------*/
int* CreateIntArray(int numOfArgs, char** arguments)
{
	//put your logic here
	//...
	int curArrInd = arraysCnt;

	strcpy(allArrays[curArrInd].name, arguments[1]);
	allArrays[curArrInd].startAddress = lastArrAddress ;
	allArrays[curArrInd].size = strtol(arguments[2], NULL, 10);
	int i ;
	for (i = 0 ; i < numOfArgs - 3; i++)
	{
		allArrays[curArrInd].startAddress[i] = strtol(arguments[3+i], NULL, 10) ;
	}
	for (i = numOfArgs - 3 ; i < allArrays[curArrInd].size ; i++)
	{
		allArrays[curArrInd].startAddress[i] = 0 ;
	}
	arraysCnt++;
	lastArrAddress += allArrays[curArrInd].size;

	return allArrays[curArrInd].startAddress ;
}
//========================================================

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");

	return 0;
}

//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");

	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
	//Comment the following line
	//panic("Function is not implemented yet!");
	uint32 va = strtol(arguments[1], NULL, 16);
	struct Frame_Info* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
	map_frame(ptr_page_directory, ptr_frame_info, (void*)va, 3);

	return 0 ;
}

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	panic("Function is not implemented yet!");

	return 0;
}

//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");

	return 0;
}



int command_ft(int number_of_arguments, char **arguments)
{
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
}
/****************************************************************/

//========================================================
/*ASSIGNMENT-FUNCTIONS*/
//========================================================
//Q1:Calculate Array Variance	(2 MARKS)
//========================================================
/*DON'T change this function*/
int command_cav(int number_of_arguments, char **arguments )
{
	//DON'T WRITE YOUR LOGIC HERE, WRITE INSIDE THE CalcArrVar() FUNCTION
	int var = CalcArrVar(arguments);
	cprintf("variance of %s = %d\n", arguments[1], var);
	return 0;
}
/*---------------------------------------------------------*/

/*FILL this function
 * arguments[1]: array name
 */
int CalcArrVar(char** arguments)
{
	//TODO: Assignment1.Q1
	//put your logic here
	//...
	//Comment the following line first
	//panic("The function is not implemented yet");

	// Find the array
	char *arrName = arguments[1];
	int arrIndex = -1;
	for (int i = 0; i < arraysCnt; i++)
		if (strcmp(arrName, allArrays[i].name) == 0)
			arrIndex = i;
	if (arrIndex == -1) {
		cprintf("There is no such array named \"%s\"\n", arrName);
		return (-1);
	}
	struct ArrayInfo *arr = &allArrays[arrIndex];

	// Calculate mean
	uint32 sum = 0;
	for (int i = 0; i < arr->size; i++) {
		sum += arr->startAddress[i];
	}
	int mean = sum / arr->size;

	// Calculate Variance
	sum = 0;
	for (int i = 0; i < arr->size; i++)
		sum += (arr->startAddress[i] - mean) * (arr->startAddress[i] - mean);
	return (sum / arr->size);
}

//========================================================
//Q2:Connect Virtual Address to Physical Frame  (3 MARKS)
//========================================================
/*DON'T change this function*/
int command_cvp(int number_of_arguments, char **arguments )
{
	//DON'T WRITE YOUR LOGIC HERE, WRITE INSIDE THE WriteDistinctChars() FUNCTION
	uint32 tableEntry = ConnectVirtualToPhysicalFrame(arguments) ;
	cprintf("The table entry after connection = %08x\n", tableEntry);

	return 0;
}
/*---------------------------------------------------------*/

/*FILL this function
 * arguments[1]: virtual address of the page in HEXADECIMAL
 * arguments[2]: number of the frame in DECIMAL
 * arguments[3]: <r/w>: 'r' for read-only permission, 'w' for read/write permission
 * Return:
 * 		page table ENTRY of the <virtual address> after applying the connection
 */
uint32 ConnectVirtualToPhysicalFrame(char** arguments)
{
	//Assignment3.Q2
	//put your logic here
	//...
	//Comment the following line first
	//panic("The function is not implemented yet");

	// Get the entry
	uint32 va = strtol(arguments[1], NULL, 16);
	uint32 new_frame_num = strtol(arguments[2], NULL, 10);
	char *mode = arguments[3];
	uint32 *PT;
	if (get_page_table(ptr_page_directory, (void *)va, 1, &PT)) {
		cprintf("Error in get_page_table()\n");
		return (1);
	}

	// Overwrite the frame number
	new_frame_num = new_frame_num << 12;
	uint32 old_frame_num = (PT[PTX(va)] >> 12) << 12;
	PT[PTX(va)] -= old_frame_num;
	PT[PTX(va)] += new_frame_num;

	// Overwrite the writing permission
	if (strcmp(mode, "w") == 0)// Writable -> Set
		PT[PTX(va)] = PT[PTX(va)] | PERM_WRITEABLE;
	else if (strcmp(mode, "r") == 0) // Read Only -> not Writable -> Reset
		PT[PTX(va)] = PT[PTX(va)] & ~PERM_WRITEABLE;
	else
		cprintf("Usage: cvp <virtual address in HEX> <frame num> <r/w>\n");

	// set present bit
	PT[PTX(va)] = PT[PTX(va)] | PERM_PRESENT;

	// reset some other bits
	uint32 mask = ~PERM_USER & ~PERM_USED & ~(0b111000000000);
	PT[PTX(va)] = PT[PTX(va)] & mask;

	return (PT[PTX(va)]);
}

//========================================================
//Q3) Count modified pages in a virtual range	(2 MARKS)
//========================================================

/*DON'T change this function*/
int command_cmps(int number_of_arguments, char **arguments )
{
	//DON'T WRITE YOUR LOGIC HERE, WRITE INSIDE THE FindInArray() FUNCTION
	int cnt = CountModifiedPagesInRange(arguments) ;
	cprintf("num of modified pages in the given range = %d\n", cnt) ;

	return 0;
}
/*---------------------------------------------------------*/

/*FILL this function
 * arguments[1]: start virtual address of the range (in HEX)
 * arguments[2]: end virtual address of the range (in HEX)
 * Return:
 * 		number of modified pages in the given range
Helpers:
 * You may need to use PERM_MODIFIED
 * There's a constant in the code called PAGE_SIZE which equal to 4KB
 * You can use ROUNDDOWN and ROUNDUP functions, described below in order to round the virtual addresses on multiple of PAGE_SIZE (4 KB)
 */
int CountModifiedPagesInRange(char** arguments)
{
	//TODO: Assignment.Q3
	//put your logic here
	//...
	//Comment the following line first
	//panic("The function is not implemented yet");

	uint32 startVA = strtol(arguments[1], NULL, 16);
	startVA /= PAGE_SIZE;
	startVA *= PAGE_SIZE;

	uint32 endVA = strtol(arguments[2], NULL, 16);

	uint32 modifiedCounter = 0;

	uint32 *PT;
	for (uint32 i = startVA; i <= endVA; i += PAGE_SIZE) {
		get_page_table(ptr_page_directory, (void *)i, 1, &PT);
		if ((PT[PTX(i)] & PERM_MODIFIED) > 0) // if modified
			modifiedCounter++;
	}
	return 5;
}
//========================================================

//Q4) Transfer User Page	(3 MARKS)
//========================================================
/*DON'T change this function*/
int command_tup(int number_of_arguments, char **arguments )
{
	//DON'T WRITE YOUR LOGIC HERE, WRITE INSIDE THE TransferUserPage() FUNCTION
	TransferUserPage(arguments);

	return 0;
}
/*---------------------------------------------------------*/

/*FILL this function
 * arguments[1]: source virtual address in HEX
 * arguments[2]: destination virtual address in HEX
 * arguments[3]: transfer mode (c: copy, m: move)
 */
void TransferUserPage(char** arguments)
{
	//TODO: Assignment.Q4

	//Comment the following line first
	panic("The function is not implemented yet");

	//put your logic here

}
//========================================================
